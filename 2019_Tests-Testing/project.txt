Система катологизации мутантов

- Code Review
    - Рассмотрим code smells применимые к тестам: 
        - multiple assert, 
            ! добавить нового мутанта
            ! тест проверят что мы присвоили ему guid, установили поле modify и приготовили кофк
            ! это не смертельно, но это запах, который проявляет то что тут должно быть 3 теста 
            ! плохо тем что непонятно какой кейс отвалился и сложный arrange
        - huge arrange, 
            ! добавить мутанту детальную информацию
            ! большой arrange - скорее всего много лишнего кода
            ! опять же, только запах                            
        - calculated values in assert
            ! получить mutant score
            ! в тесте должна быть ошибка
    - Проблема: мы не любим ревьюить тесты. Решение: начинать code review с тестов. Показать пример
        ! показать на одной части экрана быстро код и тест
        ! потом скрыть код, попросить зрителей посмотреть на тест и понять что делает код
        ! todo: добавить фичу в код, который мы уже показывали

- Analyzers (10% времени)
    - Рассмотрим на примере xUnit.Analyzers
        ! todo: разобрать анализатор
- Code Coverage (20% времени)
    - Что такое sequence points и как они влияют на результат        
    - Class Coverage и Method Coverage        
    - Отношение Line Coverage к Branch Coverage        
    - Какую информацию можно получить из этих метрик и какие проблемы остаются не решенными
        ! общий процент должен быть в пределах 70%
        ! Сlass Coverage <<<< Method Coverage и наоборот
        ! Line Coverage <<<< Branch Coverage и наоборот
-  Mutation Testing (40% времени)
    - Что такое Mutation Testing, какие проблемы оно решает 
    - Пример процесса мутационного тестирования с библиотекой stryker-net
    - Разбор исходного кода библиотеки и добавление собственного мутатора