Доклад: 
Название: Тестирование тестов
Описание: Проблема: разработчики пишут тесты, но не всегда понятно, на сколько эти тесты достаточны, не избыточны, полезны и не безвредны
В докладе будет рассмотренны 4 способа проверки тестов:
- Code Review: покажу что ревью тестов необходимо и как это эфективно делать
- Analyzers: рассмотрю самые полезные анализаторы, на примере xUnit, важно не пренебрегать ими
- Code Coverage: объясню что на самом деле обозначают эти метрики и как это использовать
- Mutation Testing: расскажу что это такое, покажу на реальном примере как использовать и как добавлять свои мутаторы
Целевая аудитория - старшие разработчики, тим лиды. Они узнают как минимизировать проблему: тесты есть, а толку нет


!!! Все проблемы дожны быть в контесте: тесты которые не тестируют ничего


План: Вступление (10% времени)
- Описание проблемы: мы подтверждаем программные решения тестами, но как проверить сами тесты?
- Тесты могут быть: недостаточными, избыточными, ошибочными
- Как же понять нам что мы не накосячили?
- Существуют 4 способа разрешения этой проблемы: code review, syntax analysers, code coverage, mutation testing
Основная часть
- Analyzers (10% времени)
    - Рассмотрим на примере xUnit.Analyzers
	- Большинство сделаны для упрощения работы с тестовым фреймворком
	- Тем не менее оно иногда нас прикрывает: https://xunit.github.io/xunit.analyzers/rules/xUnit2000
- Code Review (15% времени)
	- Приемущества, по названиям мы можем понять, что все use cases покрыты
    - Рассмотрим code smells применимые к тестам: multiple assert, huge arrange, use mock instead of stubs, test toggles in producton code, calculated values in assert
		- Отмечать, что smells тольк описывабт возможную проблему, а не говорят что 100% будет ошибка. Он просто позволяет нам просигнализировать ошибку
    - Проблема: мы не любим ревьюить тесты
    - Решение: начинать code review с тестов. Показать пример
- Code Coverage (20% времени)
	- Показать код с разным coverage и задать вопрос: а это хорошо, а это?
    - Что такое sequence points и как они влияют на результат
    - Class Coverage и Method Coverage
    - Отношение Line Coverage к Branch Coverage
    - Какую информацию можно получить из этих метрик
	- Какие проблемы остаются не решенными
-  Mutation Testing (40% времени)
    - Что такое Mutation Testing
	- Какие проблемы оно решает 
    - Пример процесса мутационного тестирования с библиотекой stryker-net
    - Разбор исходного кода библиотеки и добавление собственного мутатора
Заключение (5% времени)
- Ни одно средство не решает все проблемы, они работают в комплексе