TODO: read about ToFullString

There are a lot of resources, but anyway we'va faced a lot of problems.

Plan: REMEMBER, I SHOW SIMPLE VERSION (if you want to learn c#, you will not create an ASPNET MVC app)
how to find what should we replace(how to us Syntax Visualiser) everywthing is InvocationExpression 
show debug
everything is a SyntaxNode
root is CompilationUnit. It usualy contains a lot of things.
Go to Syntax Visualiser and figure out how to get typename (name)+Syntax
Use recursion to find all ClassDeclarations
How to replace everything - ReplaceNode
DescendantNodes() - slow but useful
Do you remember InvocationExpression? Lets to Syntax Visualiser
Properties - F12. Every all SyntaxNodes have a rich inheritance.
SURPRISE - there is no SimpleMemberAccessExpressionSyntax. Lets debug this class.
Convention - Identifier is always name
OK: now we should    
                // if not existst add ctor
				
				// add field
                // add argument to ctor
                // add assignments to ctor
                // replace all occurencies of that invocation
			you'd be wondered if i told you that we can do it in one line :)
FIrst - create ctor if not exitst. Where is this Ctors property???0_o
method AddMembers() immutable!
SyntaxFacotry - for every node
We dont have body - use WithBody
We dont have modifier - use WithModifier
Wvery modifier is not Node, it is Token.
ServiceFactory.CreateToken
Expaln about TokenKind
Ctor should be in beginign, use InsertBefore
!!!if ve save ctor before adding it to cls, we'll get different object because of parent
we want to add argument to ctor - ReplaceNode
!!! if we have to put statemtnt, lets search somethinf with statent in SyntaxFacotry
our syntax node is already changed
			


Aaaa, what's whrng with nimespaces!!! 0_o - Normalize




-----> Endlings:
Do you thing that was simple?
Do you thing that was obvoius?
Do you thing why i listened that guy because I feel that I can use Roslyn without problems?

nested classes and delegates: you should understand that if you don't develop analyser as product, simple is better than functionality

Performance - shortly - OK, but if you have details, I'm gonna make a presentation further.